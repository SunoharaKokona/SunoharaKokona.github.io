[{"title":"zsh for Linux","url":"/2025/07/21/zsh-for-Linux/","content":"Zsh美化极简速配指南\n目标：5分钟速通把终端变为「好看 + 好用」的生产力工具  \n\n\n环境：Fedora42 Workstation（GNOME&#x2F;KDE 通用，Wayland&#x2F;X11 均可）\n\n\n0.开始前准备请一定确保你的网络环境畅通！国内用户可以选择使用dev-sidecar等工具进行github访问加速\n1.安装基础组件#Fedora,OpenSUSE,CentOSsudo dnf install -y zsh git curl util-linux-user autojump-zsh#Ubuntu,Debiansudo apt install -y zsh git curl autojump fonts-jetbrains-mono\n\n\n2.安装Oh-My-Zshsh -c &quot;$(curl -fsSL https://install.ohmyz.sh/)&quot;\n\n\n3.安装Powerlevel10k 主题 + Nerd 字体# 主题git clone --depth=1 https://github.com/romkatv/powerlevel10k.git \\  $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k# Nerd Font（JetBrainsMono）mkdir -p ~/.local/share/fontscurl -fsSL https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.tar.xz \\  | tar -xJ -C ~/.local/share/fontsfc-cache -fv\n\n\n4.必装插件\n\n\n插件\n用途\n\n\n\nzsh-syntax-highlighting\n命令&#x2F;路径高亮\n\n\nzsh-autosuggestions\n历史命令自动补全\n\n\nautojump\n快速目录跳转\n\n\n# 克隆git clone https://github.com/zsh-users/zsh-syntax-highlighting.git \\  $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlightinggit clone https://github.com/zsh-users/zsh-autosuggestions.git \\  $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions\n\n\n5.启用配置编辑~&#x2F;.zshrc\nZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;plugins=(  git  autojump  zsh-autosuggestions  zsh-syntax-highlighting  colored-man-pages  extract)\n\n重载\nsource ~/.zshrc\n\n首次打开终端会启动 p10k 配置向导；随时可重设\np10k configure\n\n6.成品效果\n左右 prompt：git 分支 &#x2F; 执行时间 &#x2F; Python 或 Node 版本一目了然\n命令高亮：正确绿色，错误红色，实时提示\n自动补全：按 → 接受灰色建议\n目录跳转：j down 直接到 ~&#x2F;Downloads\nCPU &lt;1 %，启动延迟 &lt;50 ms，颜值与性能兼得。\n\n7.Happy coding!\n","categories":["Linux","系统美化"],"tags":["Linux","终端","zsh","美化"]},{"title":"Starship","url":"/2025/07/26/starship/","content":"Starship让你的终端更好看耐用\nStarship让你的终端好用到飞起\n\n\n-1.碎碎念我的上一篇博客推荐了oh-my-zsh加上Powerlevel10k的美化教程，但是Powerlevel10k已经太久时间没有更新了，所以今天给大家带来由rust语言编写的高性能shell美化工具Starship\n\n0.亿点小准备卸载oh-my-zsh在个人文件夹下找到一切有关oh-my-zsh和Powerlevel10k的文件夹，删掉！然后打开.zshrc，删去有关oh-my-zsh和Powerlevel10k的内容\n安装x-cmdX-CMD 是一款命令行工具，主要用于处理与系统安全相关的问题。它的主要功能包括：\n\n命令行处理器：类似于 Windows 的 cmd.exe，专为解决系统被 Hacker Defender 攻击的问题而设计。 \n\n微控制器支持：作为一个易于移植的命令行工具，支持多种平台，如 Linux、STM32、ESP32 等。 \n\n开源项目：基于 Posix Shell，旨在为用户提供一个功能强大、易于使用的终端环境。 \n\nX-CMD 还提供了一系列增强功能，如脚本执行和交互式 CLI 工具，旨在提升用户体验。\n\n\n安装\neval &quot;$(curl https://get.x-cmd.com)&quot;\n\n\n1.安装Starshipx starship\n\n选择自己喜欢的主题，这里推荐gruvbox-rainbow，然后确认安装就完成了\n\n2.结语是的，就是这么简单，最后享受自己的成果吧！\n\n","categories":["Linux","系统美化"],"tags":["Linux","终端","zsh","美化","Starship"]},{"title":"Avalonia-MVVM-Navigator","url":"/2025/08/06/Avalonia-MVVM-Navigator/","content":"使用ViewLocator在Avalonia中实现导航栏\n目标: 在Avalonia中实现导航栏\n\n\n环境: .net9.0 Avalonia11.3.2\n\n\n提示：本示例项目使用命名空间Studio，请以具体情况为准\n\n\n-1. 碎碎念前几天一直在研究MVVM，看到网上讲Avalonia的导航栏实现比较杂乱，于是写下这篇文章，讲解如何使用ViewLocator在Avalonia中实现导航栏\n\n0. 准备工作创建Avalonia.MVVM项目\ndotnet new install Avalonia.Templatesdotnet new avalonia.mvvm -o Avalonia-MVVM-Navigator\n\n这里我使用我正在开发的项目LambdaScore\n.├── App.axaml├── App.axaml.cs├── app.manifest├── Assets│   └── avalonia-logo.ico├── Controls│   ├── PageNavigator.axaml│   ├── PageNavigator.axaml.cs│   ├── TopBarMenu.axaml│   └── TopBarMenu.axaml.cs├── Program.cs├── Studio.csproj├── ViewLocator.cs├── ViewModels│   ├── MainWindowViewModel.cs│   ├── Pages│   │   ├── MainPageViewModel.cs│   │   ├── MusicScorePageViewModel.cs│   │   └── PublishPageViewModel.cs│   └── ViewModelBase.cs└── Views    ├── MainWindow.axaml    ├── MainWindow.axaml.cs    └── Pages        ├── MainPageView.axaml        ├── MainPageView.axaml.cs        ├── MusicScorePageView.axaml        ├── MusicScorePageView.axaml.cs        ├── PublishPageView.axaml        └── PublishPageView.axaml.cs\n\n我们用到的文件：\n\nControls&#x2F;PageNavigator.axaml:单独封装用户控件页面切换导航栏\nViewLocator.cs：ViewModel和View的映射关系\nViewModels&#x2F;MainWindowViewModel.cs：主窗口的ViewModel\nViewModels&#x2F;Pages&#x2F;*:页面的ViewModel\nViews&#x2F;MainWindow.axaml:主窗口的View\nViews&#x2F;Pages&#x2F;*:页面的View\n\n1. 编写ViewLocator.cs这一步如果你在创建项目时没有移除ViewLocator.cs，那么请跳过\n在项目根目录下创建ViewLocator.cs文件\nusing System;using Avalonia.Controls;using Avalonia.Controls.Templates;using Studio.ViewModels;namespace Studio;public class ViewLocator : IDataTemplate&#123;    public Control? Build(object? param)    &#123;        if (param is null)            return null;        var name = param.GetType().FullName!.Replace(&quot;ViewModel&quot;, &quot;View&quot;, StringComparison.Ordinal);        var type = Type.GetType(name);        if (type != null)        &#123;            return (Control)Activator.CreateInstance(type)!;        &#125;        return new TextBlock &#123; Text = &quot;Not Found: &quot; + name &#125;;    &#125;    public bool Match(object? data)    &#123;        return data is ViewModelBase;    &#125;&#125;\n\n\n2. 创建页面文件在Views&#x2F;Pages目录下使用Avalonia.UserControl创建页面文件\n创建MainPageView.axaml等页面文件\n\n3. 创建ViewModel文件在ViewModels&#x2F;Pages目录下创建MainPageViewModel.cs等文件继承ViewModelBase\nnamespace Studio.ViewModels.Pages;public class MainPageViewModel : ViewModelBase&#123;    &#125;\n\n\n4. 修改MainWindowViewModel.csusing CommunityToolkit.Mvvm.ComponentModel;using Studio.ViewModels.Pages;namespace Studio.ViewModels;public partial class MainWindowViewModel : ObservableObject&#123;    [ObservableProperty]    private bool _isMainPageSelected;    [ObservableProperty]    private bool _isMusicScorePageSelected;    [ObservableProperty]    private bool _isPublishPageSelected;    [ObservableProperty]    private object? _currentViewModel = new MainPageViewModel();    public MainWindowViewModel()    &#123;        IsMainPageSelected = true;    &#125;    public void NavigateToMain()    &#123;        IsMainPageSelected = true;        IsMusicScorePageSelected = false;        IsPublishPageSelected = false;        CurrentViewModel = new MainPageViewModel();    &#125;    public void NavigateToMusicScore()    &#123;        IsMainPageSelected = false;        IsMusicScorePageSelected = true;        IsPublishPageSelected = false;        CurrentViewModel = new MusicScorePageViewModel();    &#125;    public void NavigateToPublish()    &#123;        IsMainPageSelected = false;        IsMusicScorePageSelected = false;        IsPublishPageSelected = true;        CurrentViewModel = new PublishPageViewModel();    &#125;&#125;\n\n\n5. 添加PageNavigator组件在controls目录下用Avalonia.UserControl创建PageNavigator\n&lt;UserControl    x:Class=&quot;Studio.Controls.PageNavigator&quot;    x:DataType=&quot;vm:MainWindowViewModel&quot;    xmlns=&quot;https://github.com/avaloniaui&quot;    xmlns:vm=&quot;using:Studio.ViewModels&quot;    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;    &lt;DockPanel Height=&quot;50&quot;&gt;        &lt;Grid ColumnDefinitions=&quot;64,64,64&quot;&gt;            &lt;ToggleButton                Click=&quot;OnToggleButtonClick&quot;                Content=&quot;主页&quot;                Grid.Column=&quot;0&quot;                HorizontalAlignment=&quot;Stretch&quot;                HorizontalContentAlignment=&quot;Center&quot;                IsChecked=&quot;&#123;Binding IsMainPageSelected, Mode=TwoWay&#125;&quot; /&gt;            &lt;ToggleButton                Click=&quot;OnToggleButtonClick&quot;                Content=&quot;乐谱&quot;                Grid.Column=&quot;1&quot;                HorizontalAlignment=&quot;Stretch&quot;                HorizontalContentAlignment=&quot;Center&quot;                IsChecked=&quot;&#123;Binding IsMusicScorePageSelected, Mode=TwoWay&#125;&quot; /&gt;            &lt;ToggleButton                Click=&quot;OnToggleButtonClick&quot;                Content=&quot;发布&quot;                Grid.Column=&quot;2&quot;                HorizontalAlignment=&quot;Stretch&quot;                HorizontalContentAlignment=&quot;Center&quot;                IsChecked=&quot;&#123;Binding IsPublishPageSelected, Mode=TwoWay&#125;&quot; /&gt;        &lt;/Grid&gt;    &lt;/DockPanel&gt;&lt;/UserControl&gt;\n\nusing Avalonia.Controls;using Avalonia.Controls.Primitives;using Avalonia.Interactivity;using Avalonia.VisualTree;using Studio.ViewModels;namespace Studio.Controls;public partial class PageNavigator : UserControl&#123;    public PageNavigator()    &#123;        InitializeComponent();    &#125;    private void OnToggleButtonClick(object? sender, RoutedEventArgs e)    &#123;        switch (sender)        &#123;            case ToggleButton toggleButton:            &#123;                if (toggleButton.IsChecked == true)                &#123;                    var grid = toggleButton.FindAncestorOfType&lt;Grid&gt;();                    if (grid != null)                    &#123;                        foreach (var child in grid.Children)                        &#123;                            if (child is ToggleButton otherToggleButton &amp;&amp; otherToggleButton != toggleButton)                            &#123;                                otherToggleButton.IsChecked = false;                            &#125;                        &#125;                    &#125;                    switch (this.DataContext)                    &#123;                        // 获取 MainWindowViewModel 实例                        // 根据点击的按钮调用相应的页面切换方法                        case MainWindowViewModel mainWindowViewModel when toggleButton.Content?.ToString() == &quot;主页&quot;:                            mainWindowViewModel.NavigateToMain();                            break;                        case MainWindowViewModel mainWindowViewModel when toggleButton.Content?.ToString() == &quot;乐谱&quot;:                            mainWindowViewModel.NavigateToMusicScore();                            break;                        case MainWindowViewModel mainWindowViewModel:                        &#123;                            if (toggleButton.Content?.ToString() == &quot;发布&quot;)                            &#123;                                mainWindowViewModel.NavigateToPublish();                            &#125;                            break;                        &#125;                    &#125;                &#125;                break;            &#125;        &#125;    &#125;&#125;\n\n\n6. 在App.axaml中应用MainWindowViewModel&lt;Application    x:Class=&quot;Studio.App&quot;    xmlns=&quot;https://github.com/avaloniaui&quot;    xmlns:local=&quot;using:Studio&quot;    xmlns:semi=&quot;https://irihi.tech/semi&quot;    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;    &lt;Application.Styles&gt;        &lt;semi:SemiTheme /&gt;    &lt;/Application.Styles&gt;    &lt;Application.DataTemplates&gt;        &lt;local:ViewLocator /&gt;    &lt;/Application.DataTemplates&gt;&lt;/Application&gt;\n\nusing Avalonia;using Avalonia.Controls.ApplicationLifetimes;using Avalonia.Markup.Xaml;using Studio.ViewModels;using Studio.Views;namespace Studio;public class App : Application&#123;    public override void Initialize()    &#123;        AvaloniaXamlLoader.Load(this);    &#125;    public override void OnFrameworkInitializationCompleted()    &#123;        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)        &#123;            desktop.MainWindow = new MainWindow            &#123;                DataContext = new MainWindowViewModel()            &#125;;        &#125;        base.OnFrameworkInitializationCompleted();    &#125;&#125;\n\n\n7. 在MainWindow.axaml中使用PageNavigator&lt;Window    Icon=&quot;/Assets/avalonia-logo.ico&quot;    Title=&quot;LambdaScore Studio&quot;    x:Class=&quot;Studio.Views.MainWindow&quot;    x:DataType=&quot;vm:MainWindowViewModel&quot;    xmlns=&quot;https://github.com/avaloniaui&quot;    xmlns:controls=&quot;using:Studio.Controls&quot;    xmlns:vm=&quot;using:Studio.ViewModels&quot;    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;    &lt;Grid RowDefinitions=&quot;Auto,Auto,*&quot;&gt;        &lt;controls:TopBarMenu Grid.Row=&quot;0&quot; /&gt;        &lt;controls:PageNavigator DataContext=&quot;&#123;Binding&#125;&quot; Grid.Row=&quot;1&quot; /&gt;        &lt;ContentControl Content=&quot;&#123;Binding CurrentViewModel&#125;&quot; Grid.Row=&quot;2&quot; /&gt;    &lt;/Grid&gt;&lt;/Window&gt;\n\n\n8. 后记本项目中使用了semi.avalonia组件库，如果不想使用可以删除相关代码\n本项目已开源，欢迎star\nGitee Github\n\n","categories":[".net","Avalonia","组件设计"],"tags":["Avalonia","MVVM","导航栏"]}]